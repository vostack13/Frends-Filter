!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=38)}([function(t,e,n){t.exports=n(11)},function(t,e,n){"use strict";e.__esModule=!0,e.extend=s,e.indexOf=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},e.escapeExpression=function(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}if(!a.test(t))return t;return t.replace(o,i)},e.isEmpty=function(t){return!t&&0!==t||!(!c(t)||0!==t.length)},e.createFrame=function(t){var e=s({},t);return e._parent=t,e},e.blockParams=function(t,e){return t.path=e,t},e.appendContextPath=function(t,e){return(t?t+".":"")+e};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},o=/[&<>"'`=]/g,a=/[&<>"'`=]/;function i(t){return r[t]}function s(t){for(var e=1;e<arguments.length;e++)for(var n in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],n)&&(t[n]=arguments[e][n]);return t}var l=Object.prototype.toString;e.toString=l;var u=function(t){return"function"==typeof t};u(/x/)&&(e.isFunction=u=function(t){return"function"==typeof t&&"[object Function]"===l.call(t)}),e.isFunction=u;var c=Array.isArray||function(t){return!(!t||"object"!=typeof t)&&"[object Array]"===l.call(t)};e.isArray=c},function(t,e){function n(t,e,n,r,o,a,i){try{var s=t[a](i),l=s.value}catch(t){return void n(t)}s.done?e(l):Promise.resolve(l).then(r,o)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise(function(o,a){var i=t.apply(e,r);function s(t){n(i,o,a,s,l,"next",t)}function l(t){n(i,o,a,s,l,"throw",t)}s(void 0)})}}},function(t,e,n){"use strict";e.__esModule=!0;var r=["description","fileName","lineNumber","message","name","number","stack"];function o(t,e){var n=e&&e.loc,a=void 0,i=void 0;n&&(t+=" - "+(a=n.start.line)+":"+(i=n.start.column));for(var s=Error.prototype.constructor.call(this,t),l=0;l<r.length;l++)this[r[l]]=s[r[l]];Error.captureStackTrace&&Error.captureStackTrace(this,o);try{n&&(this.lineNumber=a,Object.defineProperty?Object.defineProperty(this,"column",{value:i,enumerable:!0}):this.column=i)}catch(t){}}o.prototype=new Error,e.default=o,t.exports=e.default},function(t,e,n){var r=n(5);t.exports=(r.default||r).template({1:function(t,e,n,r,o){var a,i=null!=e?e:t.nullContext||{},s=n.helperMissing,l=t.escapeExpression;return'    <div id="'+l("function"==typeof(a=null!=(a=n.id||(null!=e?e.id:e))?a:s)?a.call(i,{name:"id",hash:{},data:o}):a)+'" class="friends__item" draggable="true">\n        <div class="friends__item-img">\n            <img src="'+l("function"==typeof(a=null!=(a=n.photo_100||(null!=e?e.photo_100:e))?a:s)?a.call(i,{name:"photo_100",hash:{},data:o}):a)+'" alt="" draggable="false" class="friends__item-img-pic">\n        </div>\n        <p class="friends__item-name">'+l("function"==typeof(a=null!=(a=n.first_name||(null!=e?e.first_name:e))?a:s)?a.call(i,{name:"first_name",hash:{},data:o}):a)+" "+l("function"==typeof(a=null!=(a=n.last_name||(null!=e?e.last_name:e))?a:s)?a.call(i,{name:"last_name",hash:{},data:o}):a)+'</p>\n        <button id="button-add"class="friends__item-btn button-add">Добавить</button>\n        <button id="button-del" class="friends__item-btn button-del hide">Удалить</button>\n    </div>\n'},compiler:[7,">= 4.0.0"],main:function(t,e,n,r,o){var a;return null!=(a=n.each.call(null!=e?e:t.nullContext||{},null!=e?e.items:e,{name:"each",hash:{},fn:t.program(1,o,0),inverse:t.noop,data:o}))?a:""},useData:!0})},function(t,e,n){t.exports=n(16).default},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0,e.HandlebarsEnvironment=u;var o=n(1),a=r(n(3)),i=n(17),s=n(25),l=r(n(27));e.VERSION="4.0.11";e.COMPILER_REVISION=7;e.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};function u(t,e,n){this.helpers=t||{},this.partials=e||{},this.decorators=n||{},i.registerDefaultHelpers(this),s.registerDefaultDecorators(this)}u.prototype={constructor:u,logger:l.default,log:l.default.log,registerHelper:function(t,e){if("[object Object]"===o.toString.call(t)){if(e)throw new a.default("Arg not supported with multiple helpers");o.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if("[object Object]"===o.toString.call(t))o.extend(this.partials,t);else{if(void 0===e)throw new a.default('Attempting to register a partial called "'+t+'" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if("[object Object]"===o.toString.call(t)){if(e)throw new a.default("Arg not supported with multiple decorators");o.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]}};var c=l.default.log;e.log=c,e.createFrame=o.createFrame,e.logger=l.default},function(t,e,n){var r=n(13),o=n(14),a=n(15);t.exports=function(t,e){return r(t)||o(t,e)||a()}},function(t,e,n){var r=n(5);t.exports=(r.default||r).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,r,o){return'<div class="frends">\n    <div class="friends-cols">\n        <div class="frends-col__left">\n            <div class="frends-col__title">\n                <span class="frends-col__title-text">Ваши друзья</span>\n                <span class="frends-col__title-count-all"></span>\n            </div>\n            <input id="frends-search__frends-all" class="frends-search__frends-all" type="text" placeholder="Начните вводить имя друга">\n            <div id="friends__list-all" class="friends__list-all"></div>\n        </div>\n    \n        <div class="frends-col__right">\n            <div class="frends-col__title">\n                <span class="frends-col__title-text">Друзья в списке</span>\n                <span class="frends-col__title-count-my">0</span>\n            </div>\n            <input id="frends-search__frends-my" class="frends-search__frends-my" type="text" placeholder="Начните вводить имя друга">\n            <div id="friends__list-my" class="friends__list-my"></div>\n        </div>\n    </div>\n\n    <div class="frends-row__bottom">\n        <button class="frends__btn-save">Сохранить</button>\n    </div>\n</div>'},useData:!0})},function(t,e,n){var r=n(5);t.exports=(r.default||r).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,r,o){var a,i=null!=e?e:t.nullContext||{},s=n.helperMissing,l=t.escapeExpression;return'<header class="header">\n    <div class="header__logo">\n        <a href="#" class="header__logo-link">\n            <img src="img/loftschool-logo.svg" alt="" id="header-logo" class="header__logo-pic">\n        </a>\n    </div>\n\n    <h1 class="header__title">Список друзей</h1>\n\n    <button id="header__user-btn-login" class="header__user-btn-login">Войти через ВК</button>\n    <div class="header__user hide">\n        <div class="header__user-img">\n            <img src="#" alt="" class="header__user-img-pic">\n        </div>\n        <div class="header__user-name">\n            '+l("function"==typeof(a=null!=(a=n.first_name||(null!=e?e.first_name:e))?a:s)?a.call(i,{name:"first_name",hash:{},data:o}):a)+" "+l("function"==typeof(a=null!=(a=n.last_name||(null!=e?e.last_name:e))?a:s)?a.call(i,{name:"last_name",hash:{},data:o}):a)+'\n        </div>\n        <button id="header__user-btn-logout" class="header__user-btn-logout">Выход</button>\n    </div>\n\n</header>'},useData:!0})},function(t,e,n){var r=n(5);t.exports=(r.default||r).template({compiler:[7,">= 4.0.0"],main:function(t,e,n,r,o){return'<nav class="nav-menu">\n    <ul class="nav-menu__list">\n        <li class="nav-menu__item">\n            <a href="#" class="nav-menu__item-link">Фильтр друзей</a>\n        </li>\n    </ul>\n</nav>'},useData:!0})},function(t,e,n){var r=function(){return this||"object"==typeof self&&self}()||Function("return this")(),o=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,a=o&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(12),o)r.regeneratorRuntime=a;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag",u="object"==typeof t,c=e.regeneratorRuntime;if(c)u&&(t.exports=c);else{(c=e.regeneratorRuntime=u?t.exports:{}).wrap=x;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={},m={};m[i]=function(){return this};var g=Object.getPrototypeOf,y=g&&g(g(j([])));y&&y!==r&&o.call(y,i)&&(m=y);var _=L.prototype=w.prototype=Object.create(m);M.prototype=_.constructor=L,L.constructor=M,L[l]=M.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===M||"GeneratorFunction"===(e.displayName||e.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,L):(t.__proto__=L,l in t||(t[l]="GeneratorFunction")),t.prototype=Object.create(_),t},c.awrap=function(t){return{__await:t}},S(E.prototype),E.prototype[s]=function(){return this},c.AsyncIterator=E,c.async=function(t,e,n,r){var o=new E(x(t,e,n,r));return c.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},S(_),_[l]="Generator",_[i]=function(){return this},_.toString=function(){return"[object Generator]"},c.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=j,F.prototype={constructor:F,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return s.type="throw",s.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=o.call(i,"catchLoc"),u=o.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function x(t,e,n,r){var o=e&&e.prototype instanceof w?e:w,a=Object.create(o.prototype),i=new F(r||[]);return a._invoke=function(t,e,n){var r=f;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw a;return A()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=k(i,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=b(t,e,n);if("normal"===l.type){if(r=n.done?h:d,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=h,n.method="throw",n.arg=l.arg)}}}(t,n,i),a}function b(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function w(){}function M(){}function L(){}function S(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function E(t){var e;this._invoke=function(n,r){function a(){return new Promise(function(e,a){!function e(n,r,a,i){var s=b(t[n],t,r);if("throw"!==s.type){var l=s.arg,u=l.value;return u&&"object"==typeof u&&o.call(u,"__await")?Promise.resolve(u.__await).then(function(t){e("next",t,a,i)},function(t){e("throw",t,a,i)}):Promise.resolve(u).then(function(t){l.value=t,a(l)},function(t){return e("throw",t,a,i)})}i(s.arg)}(n,r,e,a)})}return e=e?e.then(a,a):a()}}function k(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,k(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=b(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var a=o.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function F(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,a=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:A}}function A(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=t[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return n}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}e.__esModule=!0;var a=o(n(6)),i=r(n(28)),s=r(n(3)),l=o(n(1)),u=o(n(29)),c=r(n(30));function f(){var t=new a.HandlebarsEnvironment;return l.extend(t,a),t.SafeString=i.default,t.Exception=s.default,t.Utils=l,t.escapeExpression=l.escapeExpression,t.VM=u,t.template=function(e){return u.template(e,t)},t}var d=f();d.create=f,c.default(d),d.default=d,e.default=d,t.exports=e.default},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0,e.registerDefaultHelpers=function(t){o.default(t),a.default(t),i.default(t),s.default(t),l.default(t),u.default(t),c.default(t)};var o=r(n(18)),a=r(n(19)),i=r(n(20)),s=r(n(21)),l=r(n(22)),u=r(n(23)),c=r(n(24))},function(t,e,n){"use strict";e.__esModule=!0;var r=n(1);e.default=function(t){t.registerHelper("blockHelperMissing",function(e,n){var o=n.inverse,a=n.fn;if(!0===e)return a(this);if(!1===e||null==e)return o(this);if(r.isArray(e))return e.length>0?(n.ids&&(n.ids=[n.name]),t.helpers.each(e,n)):o(this);if(n.data&&n.ids){var i=r.createFrame(n.data);i.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:i}}return a(e,n)})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0;var r=n(1),o=function(t){return t&&t.__esModule?t:{default:t}}(n(3));e.default=function(t){t.registerHelper("each",function(t,e){if(!e)throw new o.default("Must pass iterator to #each");var n=e.fn,a=e.inverse,i=0,s="",l=void 0,u=void 0;function c(e,o,a){l&&(l.key=e,l.index=o,l.first=0===o,l.last=!!a,u&&(l.contextPath=u+e)),s+=n(t[e],{data:l,blockParams:r.blockParams([t[e],e],[u+e,null])})}if(e.data&&e.ids&&(u=r.appendContextPath(e.data.contextPath,e.ids[0])+"."),r.isFunction(t)&&(t=t.call(this)),e.data&&(l=r.createFrame(e.data)),t&&"object"==typeof t)if(r.isArray(t))for(var f=t.length;i<f;i++)i in t&&c(i,i,i===t.length-1);else{var d=void 0;for(var p in t)t.hasOwnProperty(p)&&(void 0!==d&&c(d,i-1),d=p,i++);void 0!==d&&c(d,i-1,!0)}return 0===i&&(s=a(this)),s})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(3));e.default=function(t){t.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new r.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0;var r=n(1);e.default=function(t){t.registerHelper("if",function(t,e){return r.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||r.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper("unless",function(e,n){return t.helpers.if.call(this,e,{fn:n.inverse,inverse:n.fn,hash:n.hash})})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("log",function(){for(var e=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)e.push(arguments[r]);var o=1;null!=n.hash.level?o=n.hash.level:n.data&&null!=n.data.level&&(o=n.data.level),e[0]=o,t.log.apply(t,e)})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t){t.registerHelper("lookup",function(t,e){return t&&t[e]})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0;var r=n(1);e.default=function(t){t.registerHelper("with",function(t,e){r.isFunction(t)&&(t=t.call(this));var n=e.fn;if(r.isEmpty(t))return e.inverse(this);var o=e.data;return e.data&&e.ids&&((o=r.createFrame(e.data)).contextPath=r.appendContextPath(e.data.contextPath,e.ids[0])),n(t,{data:o,blockParams:r.blockParams([t],[o&&o.contextPath])})})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.registerDefaultDecorators=function(t){r.default(t)};var r=function(t){return t&&t.__esModule?t:{default:t}}(n(26))},function(t,e,n){"use strict";e.__esModule=!0;var r=n(1);e.default=function(t){t.registerDecorator("inline",function(t,e,n,o){var a=t;return e.partials||(e.partials={},a=function(o,a){var i=n.partials;n.partials=r.extend({},i,e.partials);var s=t(o,a);return n.partials=i,s}),e.partials[o.args[0]]=o.fn,a})},t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0;var r=n(1),o={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(t){if("string"==typeof t){var e=r.indexOf(o.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=o.lookupLevel(t),"undefined"!=typeof console&&o.lookupLevel(o.level)<=t){var e=o.methodMap[t];console[e]||(e="log");for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];console[e].apply(console,r)}}};e.default=o,t.exports=e.default},function(t,e,n){"use strict";function r(t){this.string=t}e.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},e.default=r,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.checkRevision=function(t){var e=t&&t[0]||1,n=a.COMPILER_REVISION;if(e!==n){if(e<n){var r=a.REVISION_CHANGES[n],i=a.REVISION_CHANGES[e];throw new o.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new o.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}},e.template=function(t,e){if(!e)throw new o.default("No environment passed to template");if(!t||!t.main)throw new o.default("Unknown template object: "+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var n={strict:function(t,e){if(!(e in t))throw new o.default('"'+e+'" not defined in '+t);return t[e]},lookup:function(t,e){for(var n=t.length,r=0;r<n;r++)if(t[r]&&null!=t[r][e])return t[r][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:r.escapeExpression,invokePartial:function(n,a,i){i.hash&&(a=r.extend({},a,i.hash),i.ids&&(i.ids[0]=!0));n=e.VM.resolvePartial.call(this,n,a,i);var s=e.VM.invokePartial.call(this,n,a,i);null==s&&e.compile&&(i.partials[i.name]=e.compile(n,t.compilerOptions,e),s=i.partials[i.name](a,i));if(null!=s){if(i.indent){for(var l=s.split("\n"),u=0,c=l.length;u<c&&(l[u]||u+1!==c);u++)l[u]=i.indent+l[u];s=l.join("\n")}return s}throw new o.default("The partial "+i.name+" could not be compiled when running in runtime-only mode")},fn:function(e){var n=t[e];return n.decorator=t[e+"_d"],n},programs:[],program:function(t,e,n,r,o){var a=this.programs[t],s=this.fn(t);return e||o||r||n?a=i(this,t,s,e,n,r,o):a||(a=this.programs[t]=i(this,t,s)),a},data:function(t,e){for(;t&&e--;)t=t._parent;return t},merge:function(t,e){var n=t||e;return t&&e&&t!==e&&(n=r.extend({},e,t)),n},nullContext:Object.seal({}),noop:e.VM.noop,compilerInfo:t.compiler};function s(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=r.data;s._setup(r),!r.partial&&t.useData&&(o=function(t,e){e&&"root"in e||((e=e?a.createFrame(e):{}).root=t);return e}(e,o));var i=void 0,u=t.useBlockParams?[]:void 0;function c(e){return""+t.main(n,e,n.helpers,n.partials,o,u,i)}return t.useDepths&&(i=r.depths?e!=r.depths[0]?[e].concat(r.depths):r.depths:[e]),(c=l(t.main,c,n,r.depths||[],o,u))(e,r)}return s.isTop=!0,s._setup=function(r){r.partial?(n.helpers=r.helpers,n.partials=r.partials,n.decorators=r.decorators):(n.helpers=n.merge(r.helpers,e.helpers),t.usePartial&&(n.partials=n.merge(r.partials,e.partials)),(t.usePartial||t.useDecorators)&&(n.decorators=n.merge(r.decorators,e.decorators)))},s._child=function(e,r,a,s){if(t.useBlockParams&&!a)throw new o.default("must pass block params");if(t.useDepths&&!s)throw new o.default("must pass parent depths");return i(n,e,t[e],r,0,a,s)},s},e.wrapProgram=i,e.resolvePartial=function(t,e,n){t?t.call||n.name||(n.name=t,t=n.partials[t]):t="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name];return t},e.invokePartial=function(t,e,n){var i=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var l=void 0;n.fn&&n.fn!==s&&function(){n.data=a.createFrame(n.data);var t=n.fn;l=n.data["partial-block"]=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=a.createFrame(n.data),n.data["partial-block"]=i,t(e,n)},t.partials&&(n.partials=r.extend({},n.partials,t.partials))}();void 0===t&&l&&(t=l);if(void 0===t)throw new o.default("The partial "+n.name+" could not be found");if(t instanceof Function)return t(e,n)},e.noop=s;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=function(t){return t&&t.__esModule?t:{default:t}}(n(3)),a=n(6);function i(t,e,n,r,o,a,i){function s(e){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=i;return!i||e==i[0]||e===t.nullContext&&null===i[0]||(s=[e].concat(i)),n(t,e,t.helpers,t.partials,o.data||r,a&&[o.blockParams].concat(a),s)}return(s=l(n,s,t,i,r,a)).program=e,s.depth=i?i.length:0,s.blockParams=o||0,s}function s(){return""}function l(t,e,n,o,a,i){if(t.decorator){var s={};e=t.decorator(e,s,n,o&&o[0],a,i,o),r.extend(e,s)}return e}},function(t,e,n){"use strict";(function(n){e.__esModule=!0,e.default=function(t){var e=void 0!==n?n:window,r=e.Handlebars;t.noConflict=function(){return e.Handlebars===t&&(e.Handlebars=r),t}},t.exports=e.default}).call(this,n(31))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){t.exports=n.p+"img/add.svg"},function(t,e,n){t.exports=n.p+"img/remove.svg"},function(t,e,n){t.exports=n.p+"img/search.svg"},function(t,e,n){t.exports=n.p+"img/loftschool-logo.svg"},function(t,e,n){t.exports=n.p+"img/arrow.svg"},function(t,e,n){t.exports=n.p+"img/friends.svg"},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r),a=n(2),i=n.n(a),s=(n(39),n(7)),l=n.n(s),u=(n(44),n(8)),c=n.n(u),f=n(4),d=n.n(f),p=(n(32),n(33),n(34),{}),h={},v={items:[]},m={items:[]};function g(t,e){e&&function(t){t.innerHTML=c()(),p.blockFrend=document.querySelector(".frends"),p.listFrendsAll=document.querySelector("#friends__list-all"),p.listFrendsMy=document.querySelector("#friends__list-my"),p.inputSearchAll=document.querySelector(".frends-search__frends-all"),p.inputSearchMy=document.querySelector(".frends-search__frends-my"),p.titleCountAll=document.querySelector(".frends-col__title-count-all"),p.titleCountMy=document.querySelector(".frends-col__title-count-my"),p.buttonSave=document.querySelector(".frends__btn-save"),p.buttonSave.addEventListener("click",function(t){!function(t,e){var n=!0,r=!1,o=void 0;try{for(var a,i=t.items[Symbol.iterator]();!(n=(a=i.next()).done);n=!0){var s=a.value;h[s.id]="all"}}catch(t){r=!0,o=t}finally{try{n||null==i.return||i.return()}finally{if(r)throw o}}var l=!0,u=!1,c=void 0;try{for(var f,d=e.items[Symbol.iterator]();!(l=(f=d.next()).done);l=!0){var p=f.value;h[p.id]="my"}}catch(t){u=!0,c=t}finally{try{l||null==d.return||d.return()}finally{if(u)throw c}}localStorage[E]=JSON.stringify(h)}(v,m),alert("Список друзей сохранен")}),p.blockFrend.addEventListener("click",function(t){t.target.classList.contains("button-add")?(console.log(t.target.parentElement),x(p.listFrendsAll,p.listFrendsMy,t.target.parentElement,t.target.parentElement.id)):t.target.classList.contains("button-del")&&x(p.listFrendsMy,p.listFrendsAll,t.target.parentElement,t.target.parentElement.id)}),i()(o.a.mark(function t(){var e,n,r,a,i,s,l,u,c,f,g,x,w;return o.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,M("friends.get",{fields:"photo_100"});case 3:for(e=t.sent,localStorage[E]&&(h=JSON.parse(localStorage[E])),y(e,h),p.titleCountAll.textContent=v.items.length,p.titleCountMy.textContent=m.items.length,p.listFrendsAll.innerHTML=d()(v),p.listFrendsMy.innerHTML=d()(m),n=p.listFrendsMy.querySelectorAll("#button-add"),r=p.listFrendsMy.querySelectorAll("#button-del"),a=!0,i=!1,s=void 0,t.prev=15,l=n[Symbol.iterator]();!(a=(u=l.next()).done);a=!0)u.value.classList.toggle("hide");t.next=23;break;case 19:t.prev=19,t.t0=t.catch(15),i=!0,s=t.t0;case 23:t.prev=23,t.prev=24,a||null==l.return||l.return();case 26:if(t.prev=26,!i){t.next=29;break}throw s;case 29:return t.finish(26);case 30:return t.finish(23);case 31:for(c=!0,f=!1,g=void 0,t.prev=34,x=r[Symbol.iterator]();!(c=(w=x.next()).done);c=!0)w.value.classList.toggle("hide");t.next=42;break;case 38:t.prev=38,t.t1=t.catch(34),f=!0,g=t.t1;case 42:t.prev=42,t.prev=43,c||null==x.return||x.return();case 45:if(t.prev=45,!f){t.next=48;break}throw g;case 48:return t.finish(45);case 49:return t.finish(42);case 50:p.inputSearchAll.addEventListener("keyup",function(t){p.listFrendsAll.innerHTML=d()(b(v,p.inputSearchAll.value))}),p.inputSearchMy.addEventListener("keyup",function(t){p.listFrendsMy.innerHTML=d()(b(m,p.inputSearchMy.value))}),_([p.listFrendsAll,p.listFrendsMy]),t.next=58;break;case 55:t.prev=55,t.t2=t.catch(0),console.error(t.t2);case 58:case"end":return t.stop()}},t,this,[[0,55],[15,19,23,31],[24,,26,30],[34,38,42,50],[43,,45,49]])}))()}(t)}function y(t,e){var n=!0,r=!1,o=void 0;try{for(var a,i=t.items[Symbol.iterator]();!(n=(a=i.next()).done);n=!0){var s=a.value;"my"===e[s.id]?m.items.push(s):v.items.push(s)}}catch(t){r=!0,o=t}finally{try{n||null==i.return||i.return()}finally{if(r)throw o}}}function _(t){var e;t.forEach(function(t){t.addEventListener("dragstart",function(n){e={source:t,node:n.target,id:n.target.id}}),t.addEventListener("dragover",function(t){t.preventDefault()}),t.addEventListener("drop",function(n){e&&(n.preventDefault(),e.source!==t&&x(e.source,t,e.node,e.id),e=null)})})}function x(t,e,n,r){var o,a,i=n.querySelector("#button-add"),s=n.querySelector("#button-del");i.classList.toggle("hide"),s.classList.toggle("hide"),p.listFrendsAll===t?(o=v.items.find(function(t,e,n){if(t.id==r)return a=e,!0}),v.items.splice(a,1),m.items.push(o)):(o=m.items.find(function(t,e,n){if(t.id==r)return a=e,!0}),m.items.splice(a,1),v.items.push(o)),p.titleCountAll.textContent=v.items.length,p.titleCountMy.textContent=m.items.length,e.insertBefore(n,e.firstChild)}function b(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0,n={items:[]};if(""!==e){var r=new RegExp(e,"ig"),o=!0,a=!1,i=void 0;try{for(var s,l=t.items[Symbol.iterator]();!(o=(s=l.next()).done);o=!0){var u=s.value;(r.test(u.first_name)||r.test(u.last_name))&&n.items.push(u)}}catch(t){a=!0,i=t}finally{try{o||null==l.return||l.return()}finally{if(a)throw i}}}else n=t;return n}function w(){return new Promise(function(t,e){VK.Auth.logout(function(n){n.session?e(new Error("Не удалось выйти")):(console.log("Выход выполнен"),p.blockFrend.innerHTML="",t())},2)})}function M(t,e){return e.v="5.76",new Promise(function(n,r){VK.api(t,e,function(t){t.error?r(t.error):n(t.response)})})}VK.init({apiId:6686757});var L=n(9),S=n.n(L),E=(n(46),n(35),n(36),""),k={buttonUserLogin:"",buttonUserLogout:"",headerUser:"",headerUserName:"",headerUserPic:""};function P(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?O(!0):function(t){t.innerHTML=S()(),k.buttonUserLogin=document.querySelector("#header__user-btn-login"),k.buttonUserLogout=document.querySelector("#header__user-btn-logout"),k.headerUser=document.querySelector(".header__user"),k.headerUserName=document.querySelector(".header__user-name"),k.headerUserPic=document.querySelector(".header__user-img-pic"),k.buttonUserLogin.addEventListener("click",function(t){i()(o.a.mark(function t(){return o.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:try{O(!1)}catch(t){console.error(t)}case 1:case"end":return t.stop()}},t,this)}))()}),k.buttonUserLogout.addEventListener("click",function(t){i()(o.a.mark(function t(){return o.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,w();case 3:j(),t.next=9;break;case 6:t.prev=6,t.t0=t.catch(0),console.error(t.t0);case 9:case"end":return t.stop()}},t,this,[[0,6]])}))()})}(t)}function O(t){i()(o.a.mark(function e(){var n,r,a;return o.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,t){e.next=4;break}return e.next=4,new Promise(function(t,e){VK.Auth.login(function(n){n.session?(console.log("Авторизация прошла успешно"),g(T,!0),t()):e(new Error("Не удалось авторизоваться"))},2)});case 4:return e.next=6,M("users.get",{fields:"photo_100"});case 6:n=e.sent,r=l()(n,1),a=r[0],E=a.id,F({first_name:a.first_name,last_name:a.last_name,photo:a.photo_100}),e.next=16;break;case 13:e.prev=13,e.t0=e.catch(0),console.error("ошибка в renderHeaderComp-async —> ",e.t0);case 16:case"end":return e.stop()}},e,this,[[0,13]])}))()}function F(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};k.headerUserName.textContent="".concat(t.first_name," ").concat(t.last_name),k.headerUserPic.src=t.photo,j()}function j(){k.headerUser.classList.toggle("hide"),k.buttonUserLogin.classList.toggle("hide")}var A=n(10),H=n.n(A);n(48),n(37);n.d(e,"containerMain",function(){return T});var C=document.querySelector(".nav-menu-container"),N=document.querySelector(".header-container"),T=document.querySelector(".main-container");P(N),function(t){t.innerHTML=H()()}(C),g(T),document.addEventListener("DOMContentLoaded",i()(o.a.mark(function t(){return o.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,new Promise(function(t,e){VK.Auth.getLoginStatus(function(e){"connected"===e.status?t(!0):t(!1)})});case 3:t.sent&&(P(N,!0),g(T,!0)),t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),console.error(t.t0);case 10:case"end":return t.stop()}},t,this,[[0,7]])}))())},function(t,e){},,,,,function(t,e){},,function(t,e){},,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,